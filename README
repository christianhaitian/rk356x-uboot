
1: Prepare the environment if not done so already:

   git clone https://github.com/christianhaitian/rk356x-uboot.git
   git clone https://github.com/rockchip-linux/rkbin
   mkdir -p ./prebuilts/gcc/linux-x86/aarch64/
   wget https://releases.linaro.org/components/toolchain/binaries/6.3-2017.05/aarch64-linux-gnu/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu.tar.xz
   tar Jxvf gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu.tar.xz -C ./prebuilts/gcc/linux-x86/aarch64/

Clone the rk3566 kernel you'll be using to create the resource.img for this uboot.
examples:
   https://github.com/christianhaitian/RG353VKernel.git <---For RG353 Devices
   https://github.com/christianhaitian/rg503Kernel.git <--- For RG503
   https://github.com/christianhaitian/RG353VKernel.git -b rk2023 <---For RK2023

2: build:
   Build the kernel per the instructions for the particular kernel source your using.
   Then do the following to get the resource.img file:
   make ARCH=arm64 rk3566.img
   Note: if a menu appears asking for io power domains, just press enter though them all.
   It should complete with an error however, a resource.img file should be left in the kernel's root folder.
   copy the resource.img file to the rk356x-uboot/rk3566_tool/Image folder
   Now do the following:
	cd ~/rk356x-uboot
	./make.sh rk3566

5: now ,we get the uboot.img.  Flash it to the sd card like so assuming your sdcard is located in /dev/sdb on your linux computer or vm:
   sudo dd if=uboot.img of=/dev/sdb bs=512 count=8192 seek=16384
   
